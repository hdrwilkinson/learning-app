// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  courses       Course[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Learning platform models

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  goal        String?  @db.Text
  timeline    String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  modules     Module[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@unique([courseId, order])
}

model Lesson {
  id                String             @id @default(cuid())
  title             String
  order             Int
  moduleId          String
  module            Module             @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  informationPoints InformationPoint[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([moduleId])
  @@unique([moduleId, order])
}

model InformationPoint {
  id        String           @id @default(cuid())
  content   String           @db.Text
  order     Int
  lessonId  String
  lesson    Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  progress  UserProgress[]
  questions QuizQuestion[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([lessonId])
  @@unique([lessonId, order])
}

model UserProgress {
  id                 String           @id @default(cuid())
  userId             String
  informationPointId String
  informationPoint   InformationPoint @relation(fields: [informationPointId], references: [id], onDelete: Cascade)
  
  // SM-2 algorithm fields
  repetitions        Int              @default(0)
  easinessFactor     Float            @default(2.5)
  interval           Int              @default(0) // days
  nextReviewDate     DateTime?
  
  // Progress tracking
  correctAttempts    Int              @default(0)
  incorrectAttempts  Int              @default(0)
  lastAttemptDate    DateTime?
  mastered           Boolean          @default(false)
  
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@unique([userId, informationPointId])
  @@index([userId])
  @@index([informationPointId])
  @@index([nextReviewDate])
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}

enum QuizDifficulty {
  EASY
  MEDIUM
  HARD
}

model QuizQuestion {
  id                 String           @id @default(cuid())
  informationPointId String
  informationPoint   InformationPoint @relation(fields: [informationPointId], references: [id], onDelete: Cascade)
  
  questionType       QuestionType
  difficulty         QuizDifficulty
  question           String           @db.Text
  correctAnswer      String           @db.Text
  options            String[]         // For multiple choice
  explanation        String?          @db.Text
  
  responses          QuizResponse[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([informationPointId])
}

model QuizResponse {
  id           String       @id @default(cuid())
  userId       String
  questionId   String
  question     QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  userAnswer   String       @db.Text
  isCorrect    Boolean
  timeSpent    Int?         // seconds
  
  createdAt    DateTime     @default(now())

  @@index([userId])
  @@index([questionId])
  @@index([createdAt])
}

// Curiosity Zone for unstructured learning
model CuriosityChat {
  id        String            @id @default(cuid())
  userId    String
  title     String
  messages  CuriosityMessage[]
  savedToCourse Boolean        @default(false)
  courseId  String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@index([userId])
}

model CuriosityMessage {
  id        String        @id @default(cuid())
  chatId    String
  chat      CuriosityChat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  role      String        // 'user' or 'assistant'
  content   String        @db.Text
  createdAt DateTime      @default(now())

  @@index([chatId])
}

